table.table
  colgroup
    col
    col
    - @dpn_children_categories.size.times do | md |
      col.number

  thead
    tr
      th *{ colspan: 2 } Продукт харчування
      - @dpn_children_categories.each do | o |
        th = o[ :children_category_name ]

  tbody
    - dishes_category_id = 0
    - dish_id = 0
    - products_type_id = 0

    - @dpn_dishes_products.each do | dp |
      - product_name = dp[ :product_name ]
      - koef_measure = 1

      - product_name = dp[ :product_name ]

      - if /(кг|л)$/.match( product_name )
        - product_name.gsub!( /(кг|л)$/, 'кг' => 'гр', 'л' => 'мл')
        - koef_measure = 1000

      - if dishes_category_id != dp[ :dishes_category_id ]
        - dishes_category_id = dp[ :dishes_category_id ]
        - dish_id = 0
        tr.row_group.dishes_category
          td *{ colspan: @dpn_children_categories.size + 2 } = dp[ :dishes_category_name ]

      - if dish_id != dp[ :dish_id ]
        - dish_id = dp[ :dish_id ]
        - products_type_id = 0
        tr.row_group.dish *{ data: { institution: dp[ :institution_code ] } }
          td.cell_mark *{ class: dp[ :enabled ]  ? :check : '',
                          data: { institution_dish_id: dp[ :institution_dish_id ] } }
          td *{ colspan: @dpn_children_categories.size + 1 } = dp[ :dish_name ]

      - if products_type_id != dp[ :products_type_id ]
        - products_type_id = dp[ :products_type_id ]
        tr.row_group.products_type
          td *{ colspan: @dpn_children_categories.size + 2 } = dp[ :products_type_name ]

      - product_id = dp[ :product_id ]
      tr.row_data
        td.name *{ colspan: 2 } = dp[ :product_name ]
        - @dpn_children_categories.each do | cc |
          - amount = @dishes_products_norms.select{ | o | \
              o[ :children_category_id ] == cc[ :children_category_id ] && \
              o[ :dish_id ] == dish_id && \
              o[ :product_id ] == product_id } \
                .fetch( 0, { amount: '-' } )[ :amount ]
          td.amount = amount == '-' ? amount : '%g' % ( amount.to_f * koef_measure )

